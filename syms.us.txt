// library functions ida claimed to have found
main = 0x80010ED4;
def_80012D38 = 0x80012F28;
def_80013960 = 0x80013BEC;
def_80016E24 = 0x80016E6C;
def_80016F84 = 0x800170F0;
def_800173E4 = 0x80017448;
def_80017E24 = 0x80018180;
nullsub_2 = 0x80019134;
nullsub_3 = 0x8001917C;
def_8001A240 = 0x8001A444;
def_8001A650 = 0x8001A7B0;
def_8001AC1C = 0x8001ACF8;
def_8001C560 = 0x8001C5E0;
def_8001E5B4 = 0x8001E644;
_padInitDirSeq = 0x800390C0;
_dirFailAuto = 0x80039444;
def_80045F30 = 0x80045FF8;
nullsub_4 = 0x80047174;
def_800476AC = 0x80047884;
def_800486E4 = 0x80048744;
def_80048820 = 0x8004890C;
def_80049D80 = 0x80049EEC;
nullsub_5 = 0x8004D268;
def_8004DE40 = 0x8004DEA4;
def_8004F61C = 0x8004F880;
def_80050688 = 0x80050804;
def_80051744 = 0x80051888;
def_800518C0 = 0x80051B64;
__main = 0x80051BF4;
start = 0x80051BFC;
stup1 = 0x80051C20;
stup0 = 0x80051C9C;
SpuInit = 0x80053164;
_SpuInit = 0x80053184;
SpuStart = 0x8005326C;
_spu_init = 0x800532E4;
_spu_FiDMA = 0x80053724;
_spu_Fr_ = 0x800537E0;
_spu_t = 0x80053888;
_spu_Fw = 0x80053B08;
_spu_Fr = 0x80053B8C;
_spu_FsetRXX = 0x80053BF0;
_spu_FsetRXXa = 0x80053C34;
_spu_FgetRXXa = 0x80053CD8;
_spu_FsetPCR = 0x80053D14;
_spu_Fw1ts = 0x80053DBC;
_SpuDataCallback = 0x80053E24;
SpuQuit = 0x80053E54;
_SpuIsInAllocateArea = 0x80053FC4;
_SpuIsInAllocateArea_ = 0x80054044;
SpuSetReverbModeParam = 0x800540D4;
_spu_setReverbAttr = 0x800545B4;
SpuReserveReverbWorkArea = 0x80054A84;
SpuSetReverbVoice = 0x80054AD4;
_SpuSetAnyVoice = 0x80054B04;
SpuClearReverbWorkArea = 0x80054DC4;
SpuSetKey = 0x80054F64;
SpuSetTransferStartAddr = 0x80055184;
SpuSetTransferMode = 0x800551E4;
SpuWritePartly = 0x80055214;
SpuIsTransferCompleted = 0x800552A4;
SpuRGetAllKeysStatus = 0x80055354;
SpuGetAllKeysStatus = 0x80055428;
SpuStTransfer = 0x80056274;
SpuStInit = 0x800562F4;
SpuStQuit = 0x80056408;
SpuStGetStatus = 0x8005652C;
SpuStGetVoiceStatus = 0x800565AC;
SpuStSetPreparationFinishedCallback = 0x800565BC;
SpuStSetTransferFinishedCallback = 0x800565E0;
SpuStSetStreamFinishedCallback = 0x80056604;
SpuFlush = 0x800566E4;
SpuSetIRQ = 0x800568E4;
SpuSetIRQAddr = 0x80056A24;
SpuSetIRQCallback = 0x80056A64;
_SpuCallback = 0x80056AA4;
SpuSetTransferCallback = 0x80056AD4;
SpuSetVoiceVolume = 0x80056B04;
SpuSetVoicePitch = 0x80056B84;
SpuSetVoiceStartAddr = 0x80056BF4;
SpuSetVoiceADSRAttr = 0x80056C74;
SpuSetVoiceAttr = 0x80056DB4;
def_80056EE8 = 0x80056F24;
def_80056FC8 = 0x80057004;
_spu_note2pitch = 0x800573B4;
_spu_pitch2note = 0x80057484;
SpuNSetVoiceAttr = 0x800575B4;
def_800576D8 = 0x80057714;
def_800577B8 = 0x800577F4;
def_80057CBC = 0x80057CF8;
def_80057D9C = 0x80057DD8;
SpuGetVoiceEnvelope = 0x80058194;
SpuSetCommonAttr = 0x800581B4;
def_80058204 = 0x80058244;
def_800582C4 = 0x80058304;
SpuSetReverbModeDepth = 0x80058534;
PCopen = 0x80058564;
PCclose = 0x80058584;
_SN_read = 0x80058650;
VSync = 0x80058668;
ResetCallback = 0x80058878;
InterruptCallback = 0x800588A8;
DMACallback = 0x800588D8;
VSyncCallback = 0x80058908;
VSyncCallbacks = 0x8005893C;
StopCallback = 0x8005896C;
RestartCallback = 0x8005899C;
CheckCallback = 0x800589CC;
GetIntrMask = 0x800589DC;
SetIntrMask = 0x800589F4;
startIntrVSync = 0x80058F38;
startIntrDMA = 0x80059058;
SetVideoMode = 0x800592F8;
GetVideoMode = 0x8005930C;
def_8005A030 = 0x8005A2A4;
GsGetWorkBase = 0x8005A558;
GsGetWorkBase_0 = 0x8005A9F8;
def_8005B178 = 0x8005B1D0;
GsGetWorkBase_1 = 0x8005B7AC;
def_8005BAB4 = 0x8005BD88;
DsRead = 0x8005CDF8;
DsReadSync = 0x8005D1A8;
DsReadCallback = 0x8005D218;
DsReadBreak = 0x8005D22C;
DsReadMode = 0x8005D2E0;
DsSearchFile = 0x8005D308;
DsStartReadySystem = 0x8005DC68;
DsEndReadySystem = 0x8005DCEC;
DsReadySystemMode = 0x8005DD50;
ER_active = 0x8005E1A0;
ER_clear = 0x8005E1B0;
DsGetDiskType = 0x8005E208;
rsin = 0x8005EB38;
sin_1 = 0x8005EB74;
rcos = 0x8005EC08;
SetFogNear = 0x8005ECA8;
SquareRoot0 = 0x8005EDA8;
InvSquareRoot = 0x8005EE38;
VectorNormalS = 0x8005EEC4;
VectorNormal = 0x8005EED8;
VectorNormalSS = 0x8005EF08;
MatrixNormal = 0x8005EFF8;
MulMatrix0 = 0x8005F0E8;
ApplyMatrixLV = 0x8005F1F8;
MulMatrix = 0x8005F358;
ApplyMatrix = 0x8005F468;
ApplyMatrixSV = 0x8005F4B8;
TransMatrix = 0x8005F518;
ScaleMatrix = 0x8005F548;
SetRotMatrix = 0x8005F688;
SetTransMatrix = 0x8005F6B8;
SetFarColor = 0x8005F6D8;
SetGeomOffset = 0x8005F6F8;
SetGeomScreen = 0x8005F718;
TransposeMatrix = 0x8005F728;
RotMatrix = 0x8005F768;
RotMatrixYXZ = 0x8005F9F8;
RotMatrixX = 0x8005FC88;
RotMatrixY = 0x8005FE28;
RotMatrixZ = 0x8005FFC8;
RotMatrixZXY = 0x80060168;
RotMatrixZYX_gte = 0x800603F8;
RotMatrix_gte = 0x800605F8;
RotMatrixYXZ_gte = 0x80060808;
ratan2 = 0x80060A08;
_ExitCard = 0x80060B88;
ResetGraph = 0x80060C88;
SetGraphDebug = 0x80060DFC;
SetGraphQueue = 0x80060E58;
GetGraphDebug = 0x80060EFC;
DrawSyncCallback = 0x80060F0C;
SetDispMask = 0x80060F6C;
DrawSync = 0x80061004;
ClearImage = 0x80061188;
ClearImage2 = 0x80061218;
LoadImage = 0x800612B0;
StoreImage = 0x80061310;
MoveImage = 0x80061370;
ClearOTag = 0x80061428;
ClearOTagR = 0x800614F0;
DrawPrim = 0x8006159C;
DrawOTag = 0x800615F8;
PutDrawEnv = 0x80061668;
DrawOTagEnv = 0x80061728;
GetDrawEnv = 0x80061800;
PutDispEnv = 0x80061834;
GetDispEnv = 0x80061D2C;
GetODE = 0x80061D60;
SetTexWindow = 0x80061D90;
SetDrawArea = 0x80061DC8;
SetDrawOffset = 0x80061E48;
SetPriority = 0x80061E88;
SetDrawStp = 0x80061EB0;
SetDrawMode = 0x80061ED8;
SetDrawEnv = 0x80061F2C;
nullsub_6 = 0x80062C9C;
LoadImage2 = 0x8006382C;
StoreImage2 = 0x80063918;
MoveImage2 = 0x80063A04;
DrawOTag2 = 0x80063B48;
GetClut = 0x80063CC8;
AddPrim = 0x80063CE8;
SetDrawTPage = 0x80063D28;
SetDrawMove = 0x80063D58;
_bu_init = 0x80063E58;
_card_info = 0x80063E68;
_card_load = 0x80063E78;
_card_clear = 0x80063E88;
_card_write = 0x80063EC8;
_new_card = 0x80063ED8;
InitCARD2 = 0x80063FE8;
StartCARD2 = 0x80063FF8;
StopCARD2 = 0x80064008;
_patch_card = 0x800640F4;
_patch_card2 = 0x80064188;
_copy_memcard_patch = 0x800641F8;
_ExitCard_0 = 0x80064238;
_card_read = 0x80064678;
_card_status = 0x80064688;
setRC2wait = 0x80066C44;
chkRC2wait = 0x80066C64;
unknown_libname_1 = 0x80066D04;
setjmp = 0x80067608;
strcmp = 0x80067618;
strncmp = 0x80067628;
bzero = 0x80067638;
memcpy = 0x80067648;
memset = 0x80067658;
rand = 0x80067668;
printf = 0x80067678;
InitHeap = 0x80067688;
FlushCache = 0x80067698;
GPU_cw = 0x800676A8;
DeliverEvent = 0x800676D8;
OpenEvent = 0x800676E8;
CloseEvent = 0x800676F8;
WaitEvent = 0x80067708;
TestEvent = 0x80067718;
EnableEvent = 0x80067728;
DisableEvent = 0x80067738;
OpenTh = 0x80067748;
CloseTh = 0x80067758;
ChangeTh = 0x80067768;
ReturnFromException = 0x80067778;
ResetEntryInt = 0x80067788;
HookEntryInt = 0x80067798;
EnterCriticalSection = 0x800677A8;
ExitCriticalSection = 0x800677B8;
open = 0x800677C8;
read = 0x800677D8;
write = 0x800677E8;
close = 0x800677F8;
nextfile = 0x80067808;
ChangeClearPAD = 0x80067818;
SysEnqIntRP = 0x80067828;
SysDeqIntRP = 0x80067838;
ChangeClearRCnt = 0x80067848;
SetRCnt = 0x80067858;
GetRCnt = 0x800678F4;
StartRCnt = 0x8006792C;
StopRCnt = 0x8006795C;
ResetRCnt = 0x80067990;
firstfile = 0x800679C8;
firstfile2 = 0x80067C68;
SetInitPadFlag = 0x80067C78;
ReadInitPadFlag = 0x80067C84;
PAD_init = 0x80067C94;
InitPAD = 0x80067D24;
StartPAD = 0x80067DB4;
StopPAD = 0x80067DE4;

// mml2 game functions and symbols
SetupExceptionHandler = 0x80012300;
ExceptionHandlerFunc = 0x80011E74;
dash2_fAddZenny = 0x80043E74;

dash2_d60F4 = 0x8009C7F8;
dash2_dCutscenePlayMode = 0x8007CED0;
dash2_pad1Data = 0x8009BED0;
dash2_pad2Data = 0x8009C048;
dash2_pad1TransmitBuffer = 0x8009BF04;
dash2_pad2TransmitBuffer = 0x8009C07C;
dash2_cfg_BGMVol = 0x8007CFC1;

// psyq functions ida didn't catch

PadGetState = 0x800649A8;
PadStartCom = 0x80064B78;
PadInitDirect = 0x80064c88;
PadSetAct = 0x80064698;
StoreImage2_0 = 0x8006380C;